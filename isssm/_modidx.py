# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/isssm',
                'doc_host': 'https://stefanheyder.github.io',
                'git_url': 'https://github.com/stefanheyder/isssm',
                'lib_path': 'isssm'},
  'syms': { 'isssm.ce_method': { 'isssm.ce_method._joint_cov': ('cross_entropy_method.html#_joint_cov', 'isssm/ce_method.py'),
                                 'isssm.ce_method.cross_entropy_method': ( 'cross_entropy_method.html#cross_entropy_method',
                                                                           'isssm/ce_method.py'),
                                 'isssm.ce_method.log_pdf': ('cross_entropy_method.html#log_pdf', 'isssm/ce_method.py'),
                                 'isssm.ce_method.log_weight_cem': ('cross_entropy_method.html#log_weight_cem', 'isssm/ce_method.py'),
                                 'isssm.ce_method.posterior_markov_proposal': ( 'cross_entropy_method.html#posterior_markov_proposal',
                                                                                'isssm/ce_method.py'),
                                 'isssm.ce_method.proposal_from_moments': ( 'cross_entropy_method.html#proposal_from_moments',
                                                                            'isssm/ce_method.py'),
                                 'isssm.ce_method.simulate_cem': ('cross_entropy_method.html#simulate_cem', 'isssm/ce_method.py')},
            'isssm.estimation': { 'isssm.estimation._pgnll': ('maximum_likelihood_estimation.html#_pgnll', 'isssm/estimation.py'),
                                  'isssm.estimation.gnll': ('maximum_likelihood_estimation.html#gnll', 'isssm/estimation.py'),
                                  'isssm.estimation.gnll_full': ('maximum_likelihood_estimation.html#gnll_full', 'isssm/estimation.py'),
                                  'isssm.estimation.initial_theta': ( 'maximum_likelihood_estimation.html#initial_theta',
                                                                      'isssm/estimation.py'),
                                  'isssm.estimation.mle_glssm': ('maximum_likelihood_estimation.html#mle_glssm', 'isssm/estimation.py'),
                                  'isssm.estimation.mle_glssm_ad': ( 'maximum_likelihood_estimation.html#mle_glssm_ad',
                                                                     'isssm/estimation.py'),
                                  'isssm.estimation.mle_pgssm': ('maximum_likelihood_estimation.html#mle_pgssm', 'isssm/estimation.py'),
                                  'isssm.estimation.pgnll': ('maximum_likelihood_estimation.html#pgnll', 'isssm/estimation.py')},
            'isssm.glssm': { 'isssm.glssm.log_prob': ('glssm.html#log_prob', 'isssm/glssm.py'),
                             'isssm.glssm.log_probs_x': ('glssm.html#log_probs_x', 'isssm/glssm.py'),
                             'isssm.glssm.log_probs_y': ('glssm.html#log_probs_y', 'isssm/glssm.py'),
                             'isssm.glssm.simulate_glssm': ('glssm.html#simulate_glssm', 'isssm/glssm.py'),
                             'isssm.glssm.simulate_states': ('glssm.html#simulate_states', 'isssm/glssm.py')},
            'isssm.importance_sampling': { 'isssm.importance_sampling.ess': ( 'importance_sampling.html#ess',
                                                                              'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.ess_lw': ( 'importance_sampling.html#ess_lw',
                                                                                 'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.ess_pct': ( 'importance_sampling.html#ess_pct',
                                                                                  'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.log_weights': ( 'importance_sampling.html#log_weights',
                                                                                      'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.log_weights_t': ( 'importance_sampling.html#log_weights_t',
                                                                                        'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.normalize_weights': ( 'importance_sampling.html#normalize_weights',
                                                                                            'isssm/importance_sampling.py'),
                                           'isssm.importance_sampling.pgssm_importance_sampling': ( 'importance_sampling.html#pgssm_importance_sampling',
                                                                                                    'isssm/importance_sampling.py')},
            'isssm.kalman': { 'isssm.kalman.FFBS': ('kalman_filter_smoother.html#ffbs', 'isssm/kalman.py'),
                              'isssm.kalman._filter': ('kalman_filter_smoother.html#_filter', 'isssm/kalman.py'),
                              'isssm.kalman._predict': ('kalman_filter_smoother.html#_predict', 'isssm/kalman.py'),
                              'isssm.kalman._sim_from_innovations_disturbances': ( 'kalman_filter_smoother.html#_sim_from_innovations_disturbances',
                                                                                   'isssm/kalman.py'),
                              'isssm.kalman._simulate_smoothed_FW1994': ( 'kalman_filter_smoother.html#_simulate_smoothed_fw1994',
                                                                          'isssm/kalman.py'),
                              'isssm.kalman._smooth_step': ('kalman_filter_smoother.html#_smooth_step', 'isssm/kalman.py'),
                              'isssm.kalman.account_for_nans': ('kalman_filter_smoother.html#account_for_nans', 'isssm/kalman.py'),
                              'isssm.kalman.disturbance_smoother': ('kalman_filter_smoother.html#disturbance_smoother', 'isssm/kalman.py'),
                              'isssm.kalman.kalman': ('kalman_filter_smoother.html#kalman', 'isssm/kalman.py'),
                              'isssm.kalman.simulation_smoother': ('kalman_filter_smoother.html#simulation_smoother', 'isssm/kalman.py'),
                              'isssm.kalman.smoothed_signals': ('kalman_filter_smoother.html#smoothed_signals', 'isssm/kalman.py'),
                              'isssm.kalman.smoother': ('kalman_filter_smoother.html#smoother', 'isssm/kalman.py')},
            'isssm.laplace_approximation': { 'isssm.laplace_approximation._initial_guess': ( 'laplace_approximation.html#_initial_guess',
                                                                                             'isssm/laplace_approximation.py'),
                                             'isssm.laplace_approximation.laplace_approximation': ( 'laplace_approximation.html#laplace_approximation',
                                                                                                    'isssm/laplace_approximation.py'),
                                             'isssm.laplace_approximation.posterior_mode': ( 'laplace_approximation.html#posterior_mode',
                                                                                             'isssm/laplace_approximation.py')},
            'isssm.models.glssm': { 'isssm.models.glssm.ar1': ('Models/gaussian_models.html#ar1', 'isssm/models/glssm.py'),
                                    'isssm.models.glssm.common_factor_lcm': ( 'Models/gaussian_models.html#common_factor_lcm',
                                                                              'isssm/models/glssm.py'),
                                    'isssm.models.glssm.lcm': ('Models/gaussian_models.html#lcm', 'isssm/models/glssm.py'),
                                    'isssm.models.glssm.mv_ar1': ('Models/gaussian_models.html#mv_ar1', 'isssm/models/glssm.py')},
            'isssm.models.pgssm': { 'isssm.models.pgssm.nb_pgssm': ('Models/pgssm.html#nb_pgssm', 'isssm/models/pgssm.py'),
                                    'isssm.models.pgssm.poisson_pgssm': ('Models/pgssm.html#poisson_pgssm', 'isssm/models/pgssm.py')},
            'isssm.models.stsm': { 'isssm.models.stsm.add_seasonal': ('Models/stsm.html#add_seasonal', 'isssm/models/stsm.py'),
                                   'isssm.models.stsm.stsm': ('Models/stsm.html#stsm', 'isssm/models/stsm.py')},
            'isssm.modified_efficient_importance_sampling': { 'isssm.modified_efficient_importance_sampling.modified_efficient_importance_sampling': ( 'modified_efficient_importance_sampling.html#modified_efficient_importance_sampling',
                                                                                                                                                       'isssm/modified_efficient_importance_sampling.py'),
                                                              'isssm.modified_efficient_importance_sampling.optimal_parameters': ( 'modified_efficient_importance_sampling.html#optimal_parameters',
                                                                                                                                   'isssm/modified_efficient_importance_sampling.py')},
            'isssm.pgssm': { 'isssm.pgssm.log_prob': ('pgssm.html#log_prob', 'isssm/pgssm.py'),
                             'isssm.pgssm.log_probs_y': ('pgssm.html#log_probs_y', 'isssm/pgssm.py'),
                             'isssm.pgssm.nb_pgssm_runnning_example': ('pgssm.html#nb_pgssm_runnning_example', 'isssm/pgssm.py'),
                             'isssm.pgssm.simulate_pgssm': ('pgssm.html#simulate_pgssm', 'isssm/pgssm.py')},
            'isssm.typing': { 'isssm.typing.ConvergenceInformation': ('typings.html#convergenceinformation', 'isssm/typing.py'),
                              'isssm.typing.FilterResult': ('typings.html#filterresult', 'isssm/typing.py'),
                              'isssm.typing.GLSSM': ('typings.html#glssm', 'isssm/typing.py'),
                              'isssm.typing.GLSSMObservationModel': ('typings.html#glssmobservationmodel', 'isssm/typing.py'),
                              'isssm.typing.GLSSMProposal': ('typings.html#glssmproposal', 'isssm/typing.py'),
                              'isssm.typing.GLSSMState': ('typings.html#glssmstate', 'isssm/typing.py'),
                              'isssm.typing.MarkovProposal': ('typings.html#markovproposal', 'isssm/typing.py'),
                              'isssm.typing.PGSSM': ('typings.html#pgssm', 'isssm/typing.py'),
                              'isssm.typing.SmootherResult': ('typings.html#smootherresult', 'isssm/typing.py'),
                              'isssm.typing.to_glssm': ('typings.html#to_glssm', 'isssm/typing.py')},
            'isssm.util': { 'isssm.util.MVN_degenerate': ('util.html#mvn_degenerate', 'isssm/util.py'),
                            'isssm.util.converged': ('util.html#converged', 'isssm/util.py'),
                            'isssm.util.degenerate_cholesky': ('util.html#degenerate_cholesky', 'isssm/util.py'),
                            'isssm.util.location_antithetic': ('util.html#location_antithetic', 'isssm/util.py'),
                            'isssm.util.scale_antithethic': ('util.html#scale_antithethic', 'isssm/util.py')}}}
