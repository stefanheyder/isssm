# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/models/00_gaussian_models.ipynb.

# %% auto 0
__all__ = ['lcm', 'common_factor_lcm']

# %% ../nbs/models/00_gaussian_models.ipynb 4
import jax.numpy as jnp
from jaxtyping import Float, Array
def lcm(n: int, x0: Float, s2_x0: Float, s2_eps: Float, s2_eta: Float):
    """Univariate locally constant model

    Parameters
    ----------
    n : int
        number of observations
    x0 : Float
        initial mean
    s2_x0 : Float
        initial variance
    s2_eps : Float
        variance of innovations
    s2_eta : Float
        variance of disturbances

    Returns
    -------
    model
        a GLSSM
    """
    A = jnp.ones((n, 1, 1))
    B = jnp.ones((n + 1, 1, 1))

    Sigma = jnp.concatenate((s2_x0 * jnp.ones((1, 1, 1)), s2_eps * jnp.ones((n, 1, 1))))
    Omega = jnp.ones((n + 1, 1, 1)) * s2_eta

    x0 = jnp.array(x0).reshape((1,))

    return x0, A, B, Sigma, Omega

# %% ../nbs/models/00_gaussian_models.ipynb 7
def common_factor_lcm(n: int, x0: Float[Array, "3"], Sigma0: Float[Array, "3 3"], s2_eps: Float, s2_eta: Float):

    if x0.shape != (3,):
        raise ValueError(f"x0 does not have the correct shape, expected (3,) but got {x0.shape}")
    
    A = jnp.broadcast_to(jnp.eye(3), (n, 3, 3))
    B = jnp.broadcast_to(jnp.array([[1,0,1], [0,1,1]]), (n+1,2,3))
    Sigma = jnp.concatenate(
        (Sigma0[None], s2_eps * jnp.broadcast_to(jnp.eye(3), (n,3,3)))
    )
    Omega = s2_eta * jnp.broadcast_to(jnp.eye(2), (n+1,2,2))
    
    return x0, A, B, Sigma, Omega
