# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/40_importance_sampling.ipynb.

# %% auto 0
__all__ = ['MVN', 'log_weights_t', 'log_weights', 'normalize_weights']

# %% ../nbs/40_importance_sampling.ipynb 3
import tensorflow_probability.substrates.jax.distributions as tfd
import jax.numpy as jnp

from .lcssm import v_time
MVN = tfd.MultivariateNormalFullCovariance

def log_weights_t(t, s, y, xi_fun, dist, z, Omega):
    m = s.shape
    params = xi_fun(t, s)
    p_ys = dist(params).log_prob(y).sum()
    g_zs = MVN(s, Omega).log_prob(z).sum()
    
    return p_ys - g_zs
    
def log_weights(s,y, xi_fun, dist, z, Omega):
    np1, m = s.shape
    n = np1 - 1
    params = v_time(xi_fun)(jnp.arange(n + 1), s)

    p_ys = dist(params).log_prob(y).sum()
    g_zs = MVN(s, Omega).log_prob(z).sum()
    
    return p_ys - g_zs

# %% ../nbs/40_importance_sampling.ipynb 6
def normalize_weights(log_weights):
    max_weight = jnp.max(log_weights)

    log_weights_corrected = log_weights - max_weight

    weights = jnp.exp(log_weights_corrected)

    return weights / weights.sum()


